{"version":3,"sources":["../src/app.ts","../src/config/index.ts","../src/utils/logger.ts","../src/routes/user.routes.ts","../src/controllers/user.controller.ts","../src/libs/bcrypt.utils.ts","../src/utils/db.ts","../src/utils/errorHandler.ts","../src/services/user.service.ts","../src/libs/jwt.utils.ts","../src/middlewares/validator.middleware.ts","../src/schema/user.schema.ts","../src/middlewares/checkAuth.middleware.ts","../src/routes/post.routes.ts","../src/services/post.service.ts","../src/controllers/post.controller.ts","../src/schema/post.schema.ts"],"sourcesContent":["import http from 'http'\nimport express, {ErrorRequestHandler, NextFunction, Request, Response} from 'express'\nimport {port} from './config'\nimport {logger} from './utils/logger'\nimport createHttpError from 'http-errors'\nimport userRoutes from './routes/user.routes'\nimport {checkAuth} from './middlewares/checkAuth.middleware'\nimport postRoutes from './routes/post.routes'\n\nconst app = express()\n\n// const key = generateKey()\n// const iv = generateIV()\n\napp.use(express.json())\napp.use(express.urlencoded({extended: true}))\n// app.use(globalEncryptResponse(key, iv))\n// app.use(globalDecryptRequest(key, iv))\n\napp.use('/api/v1/users', userRoutes)\napp.use('/api/v1/posts', checkAuth, postRoutes)\n\napp.use((_req: Request, _res: Response, next: NextFunction) => {\n  return next(createHttpError(404, 'Your request was not found'))\n})\n\napp.use(((err, req, res, _next) => {\n  const status = err.status ?? 500\n  const message = err.message ?? 'Internal Server Error'\n\n  return res.status(status).json({\n    error: {\n      status,\n      message,\n    },\n  })\n}) as ErrorRequestHandler)\n\nconst server = http.createServer(app)\n\nserver.listen(port, () => logger('success', 'startup', `Server listening on ${port}`))\n","import dotenv from 'dotenv'\n\ndotenv.config()\nexport const port = process.env.PORT || 3000\n\nexport const rounds = process.env.ROUNDS ? +process.env.ROUNDS : 10\n\nexport const encryptPassword = process.env.ENCRYPT_PASSWORD ?? 'ace_encrypt_password'\n\nexport const encryptSalt = process.env.ENCRYPT_SALT ?? 'salt'\n\nexport const encryptCost = process.env.ENCRYPT_COST ? +process.env.ENCRYPT_COST : 5\n\nexport const encryptLength = process.env.ENCRYPT_LEGNTH ? +process.env.ENCRYPT_LEGNTH : 256\n\nexport const jwtSecret = process.env.JWT_SECRET ?? 'jwt secure secret 123'\n","import consola from 'consola'\r\nimport {Chalk} from 'chalk'\r\n\r\nconst chalk = new Chalk({level: 3})\r\nexport const logger = (type: 'success' | 'error' | 'warn' | 'info' , funcName: string, message: string) => {\r\n  switch (type) {\r\n    case 'success': {\r\n      return consola.success(` ${chalk.bgGreen.black.bold(funcName)} ${chalk.green(message)}`)\r\n    }\r\n    case 'error': {\r\n      return consola.error(` ${chalk.bgRed.whiteBright.bold(funcName)} ${chalk.redBright(message)}`)\r\n    }\r\n    case 'warn': {\r\n      return consola.warn(` ${chalk.bgYellow.whiteBright.bold(funcName)} ${chalk.yellowBright(message)}`)\r\n    }\r\n    case 'info': {\r\n      return consola.info(` ${chalk.bgBlue.whiteBright.bold(funcName)} ${chalk.blueBright(message)}`)\r\n    }\r\n  }\r\n}","import {Router} from 'express'\r\nimport {loginUser, registerUser} from '../controllers/user.controller'\r\nimport {validate} from '../middlewares/validator.middleware'\r\nimport {loginUserSchema, registerUserSchema} from '../schema/user.schema'\r\n\r\nconst router = Router()\r\n\r\nrouter.post('/register', validate(registerUserSchema), registerUser)\r\n\r\nrouter.post('/login', validate(loginUserSchema), loginUser)\r\n\r\nexport default router;","import {NextFunction, Request, Response} from 'express'\nimport createHttpError from 'http-errors'\nimport {createUser, findUserByEmail} from '../services/user.service'\nimport {RegisterUserSchema} from '../schema/user.schema'\nimport {excludeFields} from '../utils/db'\nimport {verifyPassword} from '../libs/bcrypt.utils'\nimport {createToken} from '../libs/jwt.utils'\n\nexport const registerUser = async (\n  req: Request<unknown, unknown, RegisterUserSchema>,\n  res: Response,\n  next: NextFunction\n) => {\n  const input = req.body\n  try {\n    const user = excludeFields(await createUser(input), ['password'])\n\n    const token = createToken({id: user.id, email: user.email})\n\n    return res.status(201).json({\n      meta: {\n        status: 201,\n        message: 'Successfully register user',\n      },\n      data: {\n        user,\n        token,\n      },\n    })\n  } catch (err) {\n    return next(err)\n  }\n}\n\nexport const loginUser = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const {email, password} = req.body\n    const user = await findUserByEmail(email)\n\n    if (!user) return next(createHttpError(404, 'User not found'))\n\n    const isMatchPwd = await verifyPassword(password, user.password)\n\n    if (!isMatchPwd) return next(createHttpError(401, 'Invalid email or password'))\n\n    const token = createToken({id: user.id, email: user.email})\n\n    return res.status(200).json({\n      meta: {\n        status: 200,\n        message: 'Successfully login',\n      },\n      data: {\n        user: excludeFields(user, ['password']),\n        token,\n      },\n    })\n  } catch (err) {\n    return next(err)\n  }\n}\n","import bcrypt from 'bcrypt'\r\nimport {rounds} from '../config'\r\n\r\nexport const createHashedPassword = async (plainTextPwd: string): Promise<string> => {\r\n  const salt = await bcrypt.genSalt(rounds)\r\n\r\n  return await bcrypt.hash(plainTextPwd, salt)\r\n}\r\n\r\nexport const verifyPassword = async (plainTextPwd: string, hashedPassword: string) => {\r\n  return await bcrypt.compare(plainTextPwd, hashedPassword)\r\n}","import {PrismaClient, Prisma} from '@prisma/client'\r\n\r\nexport const prisma = new PrismaClient()\r\n\r\nexport const UserModal = prisma.user;\r\n\r\nexport const PostModal = prisma.post\r\n\r\nexport const connectToDb = prisma.$connect()\r\n\r\nexport const disconnectFromDb = prisma.$disconnect()\r\n\r\nexport const dbClientError = Prisma.PrismaClientKnownRequestError\r\n\r\nexport const excludeFields = <T, Key extends keyof T> (\r\n  fieldObj: T,\r\n  keys: Key[]\r\n): Omit<T, Key> => {\r\n  for (let key of keys) {\r\n    delete fieldObj[key]\r\n  }\r\n  return fieldObj\r\n}\r\n","export const ErrorHandler = (status: number, message?: string) => Promise.reject({\r\n  status,\r\n  message: message ? message : 'Internal Server Error'\r\n})","import {User} from '@prisma/client'\nimport {createHashedPassword} from '../libs/bcrypt.utils'\nimport {dbClientError, UserModal} from '../utils/db'\nimport {ErrorHandler} from '../utils/errorHandler'\nimport {logger} from '../utils/logger'\n\ninterface CreateUserDefaultProps {\n  name: string\n  email: string\n  password: string\n}\nexport const findUserById = async (userId: string): Promise<User | null> => {\n  try {\n    return await UserModal.findUnique({where: {id: userId}})\n  } catch (err: any) {\n    return ErrorHandler(500, err?.message)\n  }\n}\nexport const createUser = async (input: CreateUserDefaultProps): Promise<User> => {\n  try {\n    const {password, name, email} = input\n\n    const hashedPassword = await createHashedPassword(password)\n\n    const userData = {name, email, password: hashedPassword}\n\n    return await UserModal.create({data: userData})\n  } catch (err) {\n    if (err instanceof dbClientError) {\n      if (err.code === 'P2002') {\n        return ErrorHandler(409, 'User already existed with that email')\n      }\n    }\n    return ErrorHandler(500)\n  }\n}\n\nexport const findUserByEmail = async (email: string) => {\n  try {\n    return await UserModal.findUnique({where: {email}})\n  } catch (err: any) {\n    logger('error', 'findUserByEmail', err?.message)\n    if (err) return ErrorHandler(500, 'Db error')\n  }\n}\n","import jwt from 'jsonwebtoken'\nimport {jwtSecret} from '../config'\nimport {logger} from '../utils/logger'\n\nexport type Payload = {\n  id: string\n  email: string\n}\nexport const createToken = (payload: Payload) => {\n  return jwt.sign(payload, jwtSecret)\n}\n\nexport const verifyToken = (token: string) => {\n  try {\n    const decoded: Payload = jwt.verify(token, jwtSecret) as Payload\n    return {\n      decoded,\n      expired: false,\n      valid: true,\n    }\n  } catch (err: any) {\n    logger('error', 'verify token', err?.message)\n    return {\n      valid: false,\n      decoded: null,\n      expired: err.message === 'jwt expired',\n    }\n  }\n}\n","import {AnyZodObject, ZodError, ZodIssue} from 'zod'\nimport {type NextFunction, type Request, type Response} from 'express'\nimport createHttpError from 'http-errors'\nimport {logger} from '../utils/logger'\n\nexport const validate = (schema: AnyZodObject) => async (req: Request, _res: Response, next: NextFunction) => {\n  try {\n    await schema.parseAsync({\n      body: req.body,\n      query: req.query,\n      params: req.params,\n    })\n    return next()\n  } catch (err: any) {\n    if (err instanceof ZodError) {\n      const message = err.issues.map((error: ZodIssue) => error.message)[0]\n      return next(createHttpError(422, message))\n    }\n    logger('error', 'validator middleware', err?.message)\n    return next(createHttpError(422))\n  }\n}\n","import {string, z, infer, object, TypeOf} from 'zod'\r\n\r\nexport const registerUserSchema = object({\r\n  body: object({\r\n    name: string({required_error: 'Name is required'}),\r\n    email: string({required_error: 'Email is required'}).email('Invalid email format'),\r\n    password: string({required_error: 'Password is required'})\r\n  })\r\n})\r\n\r\nexport const loginUserSchema = object({\r\n  body: object({\r\n    email: string({required_error: 'Email is required'}).email('Invalid email format'),\r\n    password: string({required_error: 'Password is required'})\r\n  })\r\n})\r\n\r\n// 2 type of type declaration, and we can be use any format\r\n\r\nexport type RegisterUserSchema = z.infer<typeof registerUserSchema>['body']\r\n\r\nexport type LoginUserSchema = TypeOf<typeof loginUserSchema>['body']","import {NextFunction, Request, Response} from 'express'\nimport createHttpError from 'http-errors'\nimport {Payload, verifyToken} from '../libs/jwt.utils'\nimport {findUserById} from '../services/user.service'\n\nexport const checkAuth = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers['authorization']\n\n    if (!authHeader) return next(createHttpError(401))\n\n    const [type, token] = authHeader.split(' ')\n\n    if (type !== 'Bearer') return next(createHttpError(401, 'Invalid token type'))\n\n    const {decoded, valid, expired} = verifyToken(token)\n\n    if (expired) return next(createHttpError(401, 'Token expired'))\n\n    if (!valid) return next(createHttpError(401, 'Invalid token'))\n\n    const {id} = decoded as Payload\n\n    const user = await findUserById(id)\n\n    if (!user) return next(createHttpError(401, 'User not found'))\n\n    res.locals.user = {\n      id: user.id,\n    }\n\n    return next()\n  } catch (err) {\n    return next(err)\n  }\n}\n","import {Router} from 'express'\nimport {\n  createPostController,\n  deletePostController,\n  getAllPostsController,\n  getPostByIdController,\n  updatePostController,\n} from '../controllers/post.controller'\nimport {validate} from '../middlewares/validator.middleware'\nimport {createPostSchema, updatePostSchema} from '../schema/post.schema'\n\nconst router = Router()\n\nrouter.get('/', getAllPostsController)\n\nrouter.get('/:id', getPostByIdController)\n\nrouter.post('/', validate(createPostSchema), createPostController)\n\nrouter.patch('/:id', validate(updatePostSchema), updatePostController)\n\nrouter.delete('/:id', deletePostController)\n\nexport default router\n","import {Post, User} from '@prisma/client'\nimport {dbClientError, PostModal} from '../utils/db'\nimport {ErrorHandler} from '../utils/errorHandler'\nimport {logger} from '../utils/logger'\n\ntype CreatePostProps = {\n  title: string\n  body: string\n  userId: User['id']\n}\n\ntype UpdatePostProps = {\n  postId: string\n  title?: string\n  body?: string\n}\n\ntype PaginateProps = {\n  take: number\n  skip: number\n}\n\nexport const getTotalPostsQuantity = async (): Promise<number> => {\n  try {\n    return await PostModal.count()\n  } catch (err: any) {\n    return ErrorHandler(500, err?.message)\n  }\n}\nexport const getAllPosts = async ({skip, take}: PaginateProps): Promise<Post[]> => {\n  try {\n    return await PostModal.findMany({\n      skip,\n      take,\n      include: {\n        postBy: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    })\n  } catch (err: any) {\n    return ErrorHandler(500, err?.message)\n  }\n}\n\nexport const getPostById = async (postId: string): Promise<Post | null> => {\n  try {\n    return await PostModal.findUnique({\n      where: {id: postId},\n      include: {\n        postBy: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    })\n  } catch (err: any) {\n    return ErrorHandler(500, err?.message)\n  }\n}\n\nexport const createPost = async (data: CreatePostProps): Promise<Post> => {\n  try {\n    return await PostModal.create({data})\n  } catch (err: any) {\n    logger('error', 'createPost', err.message)\n    return ErrorHandler(500, err.message)\n  }\n}\n\nexport const updatePost = async (data: UpdatePostProps): Promise<Post> => {\n  const {postId, title, body} = data\n  try {\n    return await PostModal.update({where: {id: postId}, data: {title, body}})\n  } catch (err: any) {\n    return ErrorHandler(500, err?.message)\n  }\n}\n\nexport const deletePost = async (postId: string): Promise<Post> => {\n  try {\n    return await PostModal.delete({where: {id: postId}})\n  } catch (err: any) {\n    if (err instanceof dbClientError) {\n      if (err.code === 'P2025') {\n        return ErrorHandler(404, 'Post not found')\n      }\n    }\n    return ErrorHandler(500, 'Db error')\n  }\n}\n","import {NextFunction, Request, Response} from 'express'\nimport {CreatePostSchema, UpdatePostSchema} from '../schema/post.schema'\nimport {\n  createPost,\n  deletePost,\n  getAllPosts,\n  getPostById,\n  getTotalPostsQuantity,\n  updatePost,\n} from '../services/post.service'\nimport createHttpError from 'http-errors'\n\nexport const createPostController = async (\n  req: Request<unknown, unknown, CreatePostSchema>,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const input = req.body\n    const userId = res.locals.user?.id\n    const data = {...input, userId}\n    const post = await createPost(data)\n\n    return res.status(200).json({\n      meta: {\n        status: 200,\n        message: 'Successfully create new post',\n      },\n      data: {\n        post,\n      },\n    })\n  } catch (err) {\n    return next(err)\n  }\n}\n\nexport const getAllPostsController = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    let pages = req.query.pages ? parseInt(<string>req.query.pages) : 1\n    if (isNaN(pages)) return next(createHttpError(422, 'Pages should be number type'))\n\n    let skip: number,\n      take: number = 20\n\n    pages <= 1 ? (skip = 0) : (skip = (pages - 1) * take)\n\n    console.log(skip)\n\n    const posts = await getAllPosts({skip, take})\n\n    pages = pages++\n\n    const total = await getTotalPostsQuantity()\n\n    const totalPages = Math.ceil(total / take)\n\n    const hasNextPage = pages < totalPages\n\n    const nextPage = hasNextPage ? pages + 1 : null\n\n    return res.status(200).json({\n      meta: {\n        status: 200,\n        message: 'Successfully create new post',\n        total,\n        totalPages,\n        currentPages: pages,\n        hasNextPage,\n        nextPage,\n      },\n      data: {\n        posts,\n      },\n    })\n  } catch (err) {\n    return next(err)\n  }\n}\n\nexport const getPostByIdController = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const postId = req.params.id\n\n    if (!postId) return next(createHttpError(422, 'Post id not found'))\n\n    const post = await getPostById(postId)\n\n    if (!post) return next(createHttpError(404, 'Post not found'))\n\n    return res.status(200).json({\n      meta: {\n        status: 200,\n        message: `Successfully get post`,\n      },\n      data: {\n        post,\n      },\n    })\n  } catch (err: any) {\n    return next(err)\n  }\n}\n\nexport const updatePostController = async (\n  req: Request<{id: string}, unknown, UpdatePostSchema>,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const id = req.params.id\n    const userId = res.locals.user?.id\n    const input = {postId: id, userId, ...req.body}\n\n    const post = await updatePost(input)\n\n    return res.status(202).json({\n      meta: {\n        status: 202,\n        message: 'Successfully create new post',\n      },\n      data: {\n        post,\n      },\n    })\n  } catch (err) {\n    return next(err)\n  }\n}\n\nexport const deletePostController = async (req: Request<{id: string}>, res: Response, next: NextFunction) => {\n  try {\n    const postId = req.params.id\n    const post = await deletePost(postId)\n\n    return res.status(200).json({\n      meta: {\n        status: 200,\n        message: 'Successfully deleted post',\n      },\n      data: {\n        post: {\n          id: postId,\n        },\n      },\n    })\n  } catch (err) {\n    return next(err)\n  }\n}\n","import {object, string, TypeOf} from 'zod'\n\nexport const createPostSchema = object({\n  body: object({\n    title: string({required_error: 'Title is required'}),\n    body: string({required_error: 'Body is required'}),\n  }),\n})\n\nexport type CreatePostSchema = TypeOf<typeof createPostSchema>['body']\n\nexport const updatePostSchema = object({\n  body: object({\n    title: string({required_error: 'Title is required'}).optional(),\n    body: string({required_error: 'Body is required'}).optional(),\n  }),\n})\n\nexport type UpdatePostSchema = TypeOf<typeof updatePostSchema>['body']\n"],"mappings":"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","names":["http","express","dotenv","port","rounds","encryptPassword","encryptSalt","encryptCost","encryptLength","jwtSecret","consola","Chalk","chalk","logger","type","funcName","message","createHttpError","Router","createHttpError","bcrypt","createHashedPassword","plainTextPwd","salt","bcrypt","rounds","verifyPassword","hashedPassword","PrismaClient","Prisma","prisma","UserModal","PostModal","connectToDb","disconnectFromDb","dbClientError","excludeFields","fieldObj","keys","key","ErrorHandler","status","message","findUserById","userId","UserModal","err","ErrorHandler","createUser","input","password","name","email","hashedPassword","createHashedPassword","userData","dbClientError","findUserByEmail","logger","jwt","createToken","payload","jwt","jwtSecret","verifyToken","token","err","logger","registerUser","req","res","next","input","user","excludeFields","createUser","token","createToken","err","loginUser","email","password","findUserByEmail","createHttpError","verifyPassword","ZodError","createHttpError","validate","schema","req","_res","next","err","ZodError","message","error","createHttpError","logger","string","object","registerUserSchema","loginUserSchema","router","Router","validate","registerUserSchema","registerUser","loginUserSchema","loginUser","user_routes_default","createHttpError","checkAuth","req","res","next","authHeader","createHttpError","type","token","decoded","valid","expired","verifyToken","id","user","findUserById","err","Router","getTotalPostsQuantity","PostModal","err","ErrorHandler","getAllPosts","skip","take","getPostById","postId","createPost","data","logger","updatePost","title","body","deletePost","dbClientError","createHttpError","createPostController","req","res","next","input","userId","data","post","createPost","err","getAllPostsController","pages","skip","take","posts","getAllPosts","total","getTotalPostsQuantity","totalPages","hasNextPage","nextPage","getPostByIdController","postId","getPostById","updatePostController","id","updatePost","deletePostController","deletePost","object","string","createPostSchema","updatePostSchema","router","Router","getAllPostsController","getPostByIdController","validate","createPostSchema","createPostController","updatePostSchema","updatePostController","deletePostController","post_routes_default","app","express","user_routes_default","checkAuth","post_routes_default","_req","_res","next","createHttpError","err","req","res","_next","status","message","server","http","port","logger"]}