import he from"http";import _ from"express";import de from"dotenv";de.config();var C=process.env.PORT||3e3,j=process.env.ROUNDS?+process.env.ROUNDS:10,be=process.env.ENCRYPT_PASSWORD??"ace_encrypt_password",Ue=process.env.ENCRYPT_SALT??"salt",Se=process.env.ENCRYPT_COST?+process.env.ENCRYPT_COST:5,qe=process.env.ENCRYPT_LEGNTH?+process.env.ENCRYPT_LEGNTH:256,T=process.env.JWT_SECRET??"jwt secure secret 123";import x from"consola";import{Chalk as me}from"chalk";var u=new me({level:3}),c=(r,e,s)=>{switch(r){case"success":return x.success(` ${u.bgGreen.black.bold(e)} ${u.green(s)}`);case"error":return x.error(` ${u.bgRed.whiteBright.bold(e)} ${u.redBright(s)}`);case"warn":return x.warn(` ${u.bgYellow.whiteBright.bold(e)} ${u.yellowBright(s)}`);case"info":return x.info(` ${u.bgBlue.whiteBright.bold(e)} ${u.blueBright(s)}`)}};import we from"http-errors";import{Router as ge}from"express";import Y from"http-errors";import E from"bcrypt";var F=async r=>{let e=await E.genSalt(j);return await E.hash(r,e)},H=async(r,e)=>await E.compare(r,e);import{PrismaClient as le,Prisma as ye}from"@prisma/client";var R=new le,b=R.user,p=R.post,_e=R.$connect(),je=R.$disconnect(),U=ye.PrismaClientKnownRequestError,I=(r,e)=>{for(let s of e)delete r[s];return r};var a=(r,e)=>Promise.reject({status:r,message:e||"Internal Server Error"});var O=async r=>{try{return await b.findUnique({where:{id:r}})}catch(e){return a(500,e?.message)}},A=async r=>{try{let{password:e,name:s,email:t}=r,o=await F(e),n={name:s,email:t,password:o};return await b.create({data:n})}catch(e){return e instanceof U&&e.code==="P2002"?a(409,"User already existed with that email"):a(500)}},$=async r=>{try{return await b.findUnique({where:{email:r}})}catch(e){if(c("error","findUserByEmail",e?.message),e)return a(500,"Db error")}};import D from"jsonwebtoken";var k=r=>D.sign(r,T),M=r=>{try{return{decoded:D.verify(r,T),expired:!1,valid:!0}}catch(e){return c("error","verify token",e?.message),{valid:!1,decoded:null,expired:e.message==="jwt expired"}}};var L=async(r,e,s)=>{let t=r.body;try{let o=I(await A(t),["password"]),n=k({id:o.id,email:o.email});return e.status(201).json({meta:{status:201,message:"Successfully register user"},data:{user:o,token:n}})}catch(o){return s(o)}},Z=async(r,e,s)=>{try{let{email:t,password:o}=r.body,n=await $(t);if(!n)return s(Y(404,"User not found"));if(!await H(o,n.password))return s(Y(401,"Invalid email or password"));let l=k({id:n.id,email:n.email});return e.status(200).json({meta:{status:200,message:"Successfully login"},data:{user:I(n,["password"]),token:l}})}catch(t){return s(t)}};import{ZodError as fe}from"zod";import K from"http-errors";var y=r=>async(e,s,t)=>{try{return await r.parseAsync({body:e.body,query:e.query,params:e.params}),t()}catch(o){if(o instanceof fe){let n=o.issues.map(i=>i.message)[0];return t(K(422,n))}return c("error","validator middleware",o?.message),t(K(422))}};import{string as f,object as S}from"zod";var z=S({body:S({name:f({required_error:"Name is required"}),email:f({required_error:"Email is required"}).email("Invalid email format"),password:f({required_error:"Password is required"})})}),G=S({body:S({email:f({required_error:"Email is required"}).email("Invalid email format"),password:f({required_error:"Password is required"})})});var N=ge();N.post("/register",y(z),L);N.post("/login",y(G),Z);var Q=N;import g from"http-errors";var W=async(r,e,s)=>{try{let t=r.headers.authorization;if(!t)return s(g(401));let[o,n]=t.split(" ");if(o!=="Bearer")return s(g(401,"Invalid token type"));let{decoded:i,valid:l,expired:P}=M(n);if(P)return s(g(401,"Token expired"));if(!l)return s(g(401,"Invalid token"));let{id:h}=i,w=await O(h);return w?(e.locals.user={id:w.id},s()):s(g(401,"User not found"))}catch(t){return s(t)}};import{Router as Pe}from"express";var J=async()=>{try{return await p.count()}catch(r){return a(500,r?.message)}},V=async({skip:r,take:e})=>{try{return await p.findMany({skip:r,take:e,include:{postBy:{select:{id:!0,name:!0}}}})}catch(s){return a(500,s?.message)}},X=async r=>{try{return await p.findUnique({where:{id:r},include:{postBy:{select:{id:!0,name:!0}}}})}catch(e){return a(500,e?.message)}};var ee=async r=>{try{return await p.create({data:r})}catch(e){return c("error","createPost",e.message),a(500,e.message)}},re=async r=>{let{postId:e,title:s,body:t}=r;try{return await p.update({where:{id:e},data:{title:s,body:t}})}catch(o){return a(500,o?.message)}},te=async r=>{try{return await p.delete({where:{id:r}})}catch(e){return e instanceof U&&e.code==="P2025"?a(404,"Post not found"):a(500,"Db error")}};import B from"http-errors";var se=async(r,e,s)=>{try{let t=r.body,o=e.locals.user?.id,n={...t,userId:o},i=await ee(n);return e.status(200).json({meta:{status:200,message:"Successfully create new post"},data:{post:i}})}catch(t){return s(t)}},oe=async(r,e,s)=>{try{let t=r.query.pages?parseInt(r.query.pages):1;if(isNaN(t))return s(B(422,"Pages should be number type"));let o,n=15;t<=1?o=0:o=(t-1)*n;let i=await V({skip:o,take:n});t=t++;let l=await J(),P=Math.ceil(l/n),h=t<P,w=h?t+1:null;return e.status(200).json({meta:{status:200,message:"Successfully create new post",total:l,totalPages:P,currentPages:t,hasNextPage:h,nextPage:w},data:{posts:i}})}catch(t){return s(t)}};var ne=async(r,e,s)=>{try{let t=r.params.id;if(!t)return s(B(422,"Post id not found"));let o=await X(t);return o?e.status(200).json({meta:{status:200,message:"Successfully get post"},data:{post:o}}):s(B(404,"Post not found"))}catch(t){return s(t)}},ae=async(r,e,s)=>{try{let t=r.params.id,o=e.locals.user?.id,n={postId:t,userId:o,...r.body},i=await re(n);return e.status(202).json({meta:{status:202,message:"Successfully create new post"},data:{post:i}})}catch(t){return s(t)}},ie=async(r,e,s)=>{try{let t=r.params.id,o=await te(t);return e.status(200).json({meta:{status:200,message:"Successfully deleted post"},data:{post:{id:t}}})}catch(t){return s(t)}};import{object as q,string as v}from"zod";var ce=q({body:q({title:v({required_error:"Title is required"}),body:v({required_error:"Body is required"})})}),ue=q({body:q({title:v({required_error:"Title is required"}).optional(),body:v({required_error:"Body is required"}).optional()})});var d=Pe();d.get("/",oe);d.get("/user/:id");d.post("/",y(ce),se);d.get("/:id",ne);d.patch("/:id",y(ue),ae);d.delete("/:id",ie);var pe=d;var m=_();m.use(_.json());m.use(_.urlencoded({extended:!0}));m.use("/api/v1/users",Q);m.use("/api/v1/posts",W,pe);m.use((r,e,s)=>s(we(404,"Your request was not found")));m.use((r,e,s,t)=>{let o=r.status??500,n=r.message??"Internal Server Error";return s.status(o).json({error:{status:o,message:n}})});var xe=he.createServer(m);xe.listen(C,()=>c("success","startup",`Server listening on ${C}`));
//# sourceMappingURL=app.mjs.map